apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: report-code-analysis
  # This Tekton Task retrieves the task id generated by SonarQube for the code analysis scan. 
  # The ID is used as a parameter when calling the SonarQube task Status API. The API returns
  # the status of the scan initiated for your code. If the scan status returns SUCCESS,
  # then the task proceeds to call the SonarQube Project API, which returns the status
  # of the report generated. If this new call returns the project status ERROR then the 
  # task terminates and fails the Pipeline.
spec:
  workspaces:
  - name: source-dir 
  params:
    # The parameters below require values passed to the task by the pipeline/pipelinerun
    - name: SONAR_HOST_URL
      type: string
      description: url of the SONAR Host passed by the pipeline defined in the pipelinerun
    - name: SONAR_PROJECT_KEY
      type: string
      description: SONAR Project Key passed by the pipeline defined in the pipelinerun

    # The parameters below are used within each step and can be used to override the step image
    # or sonarqube working directory stored within the shared workspace.
    - name: STEP_IMAGE
      description: The location of the container image used in each step created.
      default: registry.redhat.io/ubi7/ubi-minimal
    - name: subdirectory
      description: subdirectory inside the "source-dir" workspace created and used by sonar scan
      type: string
      default: ".scannerwork"  
    - name: TASK_API_URL
      description: paramete to set with the Task API URL once its retrieved
      type: string
      default: ""       

    # The parameters below are locally used within the steps and a value should not be passed
    # to them unless the intent is to override the default value. 
    - name: get_task_url 
      type: string     
      default: "Task_Url=$(grep \"ceTaskUrl\" report-task.txt | sed -e 's/ceTaskUrl=//')"
      description: Text searching and parsing script used to retrieve the task ID from the report-task file  

    - name: get_task_status
      type: string
      default: "Task_Status=$(grep -oP '(?<=\"status\":\")[^\"]*' task-status.txt)"
      description: Text searching and parsing script used to retrieve the status from the task_status file used to save the api returned data

    - name: get_report_status
      type: string
      default: "Report_Status=$(grep -oP '(?<=\"projectStatus\":{\"status\":\")[^\"]*' report-status.txt)"
      description: Text searching and parsing script used to retrieve the status from the report-status file used to save the api returned data

    - name: PROJECT_API
      type: string
      default: "/api/qualitygates/project_status?projectKey="
      description: The API used to retrieve the quality gate status of the project

  #TASK STEPS 
  steps:
    # Step retrieves the Compute Engine task status API url and calls it 
    - name: get-task-url      
      image:  $(params.STEP_IMAGE)
      workingDir: /workspace/source-dir/$(params.subdirectory)
      command: ["/bin/bash", "-c"]
      args:
        - |-
          echo "----- Retrieve Task Url from "report-task" File --------"
          EvalTaskUrl=$(params.get_task_url)
          eval $EvalTaskUrl        
          echo "--------------------------------------------------------"          
          echo "----- TASK API URL -------------------------------------"
          echo $Task_Url 
          echo "--------------------------------------------------------"          
          curl ${Task_Url} -o task-status.txt 
          echo "----- TASK API called output saved to task-status file -"
          echo "--------------------------------------------------------"           
       
    # Step retrieves the Task Status saved to a txt file from the above API call
    # and waits until the status is returned SUCCESS. If a status other than success
    # is returned then the task is exited failing the pipeline
    - name: get-task-status      
      image: $(params.STEP_IMAGE)
      workingDir: /workspace/source-dir/$(params.subdirectory)
      command: ["/bin/bash", "-c"]
      args:
        - |-
          echo "--------------------------------------------------------"
          echo " Retrieving Task Status from text file"
          EvalTaskStatus=$(params.get_task_status)
          eval $EvalTaskStatus        
          while [ $Task_Status == "IN_PROGRESS" ]
          do
           echo "--------------------------------------------------------"
           echo "Task Status=$Task_Status"
           echo "--------------------------------------------------------" 
           echo "- WAITING to Try Again -"
           sleep 10 
           echo "- CALLING Task Status API again -"           
           EvalTaskUrl=$(params.get_task_url)
           eval $EvalTaskUrl                     
           curl ${Task_Url} -o task-status.txt 
           EvalTaskStatus=$(params.get_task_status)
           eval $EvalTaskStatus          
          done           
          echo "-------------------------------------------------------"
          echo "Task Status=$Task_Status"
          echo "-------------------------------------------------------"
          if [ $Task_Status != 'SUCCESS' ]
          then
            echo "----- Code analysis Task completion FAILED ----------"            
            echo "----- Please Login into SonarQube for more details"
            echo "----- Exiting PIPELINE ------------------------------"
            exit 1
          else 
            echo "----- Code Analysis Task COMPLETE -------------------"
            echo "----- Proceeding to next step -----------------------"
          fi 

    # Step calls the Quality Gate API and saves the data to a text file. It retrieves
    # the project status and if the status returned is ERROR exits the task and fails the pipeline 
    - name: get-report-status      
      image:  $(params.STEP_IMAGE)
      workingDir: /workspace/source-dir/$(params.subdirectory)
      command: ["/bin/bash", "-c"]
      args:
        - |-
          echo "-------------------------------------------------------"
          Report_url="$(params.SONAR_HOST_URL)$(params.PROJECT_API)$(params.SONAR_PROJECT_KEY)"
          echo "----- Report Status API URL ---------------------------"
          echo $Report_url 
          echo "-------------------------------------------------------"
          echo "----- Report API called output saved to "report-status" file"
          curl ${Report_url} -o report-status.txt          
          EvalReportStatus=$(params.get_report_status)
          eval $EvalReportStatus 
          echo "-------------------------------------------------------"
          echo "Report Status="$Report_Status
          echo "-------------------------------------------------------"
          if [ $Report_Status == 'ERROR' ]
          then
            echo "---- Code analysis FAILED Quality Gate---------------"            
            echo "---- Please Login into SonarQube for more details"
            echo "---- Exiting PIPELINE -------------------------------"
            exit 1
          else 
            echo "----- Code Aanlysis PASSED Quality Gate Scan --------"
            echo "----- Proceeding with Pipeline ----------------------"
          fi      